ARG PHP_VERSION=8
FROM php:${PHP_VERSION}-zts-alpine
LABEL org.opencontainers.image.description="PHP base image with commonly used extensions pre-installed" \
     "com.koalaphils.vendor"="Koala Software Technology Innovations" \
     "com.koalaphils.image.author"="mdprotacio@outlook.com"

ENV COMPOSER_ALLOW_SUPERUSER=1
# Dependencies for building PHP extensions
# Add dependencies for PIE
ENV PHPIZE_DEPS="${PHPIZE_DEPS} autoconf automake build-base gcc git libtool m4 make"

# Copy PIE and Composer binaries
COPY --link --from=ghcr.io/php/pie:bin /pie /usr/bin/pie
COPY --link --from=composer/composer /usr/bin/composer /usr/local/bin/composer

# Install dependencies
RUN set -eux; \
    apk update && \
    apk add --no-cache \
# Add helper tools for development \
        curl \
        gettext \
        netcat-openbsd \
        wget \
# Add SSL support \
        ca-certificates \
        gnupg \
        openssl \
# PHP extension dependencies \
        c-ares \
        freetype \
        icu-libs \
        imagemagick \
        imagemagick-libs \
        libavif \
        libcurl \
        libjpeg-turbo \
        libmcrypt \
        libmemcached-libs \
        libpng \
        libwebp \
        libxslt \
        libzip \
        msgpack-c \
        musl \
        sqlite-libs \
        unixodbc \
        zlib \
    ;

RUN set -eux; \
    apk update && \
    apk add --no-cache --virtual .build-deps \
        $PHPIZE_DEPS \
        curl-dev \
        freetype-dev \
        gettext-dev \
        icu-dev \
        imagemagick-dev \
        libavif-dev \
        libjpeg-turbo-dev \
        libmcrypt-dev \
        libmemcached-dev \
        libpng-dev \
        libwebp-dev \
        libxslt-dev \
        libzip-dev \
        linux-headers \
        msgpack-c-dev \
        musl-dev \
        openssl-dev \
        sqlite-dev \
        unixodbc-dev \
        zlib-dev \
    ; \
    export \
		CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
    ; \
\
# Install PHP extensions from source using PECL \
    pecl install --onlyreqdeps --nobuild igbinary; \
        cd "$(pecl config-get temp_dir)/igbinary"; \
        phpize; \
        ./configure; \
        make && make test && make install && make clean || exit 1; \
        cd -; \
        docker-php-ext-enable --ini-name 0-docker-php-ext-igbinary.ini igbinary; \
    pecl install --onlyreqdeps --nobuild msgpack; \
        cd "$(pecl config-get temp_dir)/msgpack"; \
        phpize; \
        ./configure; \
        make && make test && make install && make clean || exit 1; \
        cd -; \
        docker-php-ext-enable --ini-name 0-docker-php-ext-msgpack.ini msgpack; \
    pecl install --onlyreqdeps --nobuild sqlsrv; \
        cd "$(pecl config-get temp_dir)/sqlsrv"; \
        phpize; \
        ./configure; \
        make && make test && make install && make clean || exit 1; \
        cd -; \
        docker-php-ext-enable sqlsrv; \
    pecl install --onlyreqdeps --nobuild pdo_sqlsrv; \
        cd "$(pecl config-get temp_dir)/pdo_sqlsrv"; \
        phpize; \
        ./configure; \
        make && make test && make install && make clean || exit 1; \
        cd -; \
        docker-php-ext-enable pdo_sqlsrv; \
    pecl install --onlyreqdeps --nobuild xhprof; \
        cd "$(pecl config-get temp_dir)/xhprof/extension"; \
        phpize; \
        ./configure; \
        make && make test && make install && make clean || exit 1; \
        cd -; \
        docker-php-ext-enable xhprof; \
\
# Install PHP extensions built into the official image \
    docker-php-ext-configure gd --with-jpeg --with-webp --with-freetype --with-avif; \
    docker-php-ext-install -j"$(nproc)" \
        bcmath \
        dba \
        gd \
        gettext \
        intl \
        mysqli \
        pcntl \
        pdo \
        pdo_mysql \
        pdo_sqlite \
        sockets \
        xsl \
        zip; \
    \
# Install additional PHP extensions using PIE for easier management and to get the latest stable versions \
    pie install --skip-enable-extension apcu/apcu  && \
    pie install --skip-enable-extension imagick/imagick && \
    pie install --skip-enable-extension nikic/php-ast  && \
    pie install --skip-enable-extension osmanov/pecl-ev  && \
    pie install --skip-enable-extension pecl/mcrypt  && \
    pie install --skip-enable-extension pecl/pcov  && \
    pie install --skip-enable-extension php-memcached/php-memcached --enable-memcached-json --enable-memcached-igbinary --enable-memcached-msgpack  && \
    pie install --skip-enable-extension phpredis/phpredis --enable-redis-igbinary --enable-redis-msgpack  && \
    pie install --skip-enable-extension swoole/swoole  && \
    pie install --skip-enable-extension xdebug/xdebug  && \
    docker-php-ext-enable apcu \
      imagick \
      ast \
      ev \
      mcrypt \
      pcov \
      memcached \
      redis \
      swoole \
      xdebug ; \
    \
# Cleanup \
	runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)"; \
	apk add --no-cache $runDeps; \
	\
	apk del --no-network .build-deps; \
	\
# update pecl channel definitions https://github.com/docker-library/php/issues/443
	pecl update-channels; \
	rm -rf /tmp/pear ~/.pearrc; \
	\
# smoke test
	php -m; \
# remove all extensions by default except for igbinary and msgpack \
    rm -rf $PHP_INI_DIR/conf.d/docker-php-ext-*.ini; \
    rm -rf /tmp/* ~/.pearrc /var/lib/apt/lists/* /var/cache/*; \
# re-enable default extensions by official image \
    docker-php-ext-enable sodium opcache; \
# copy envsubst for easier use in entrypoint scripts \
    cp /usr/bin/envsubst /usr/local/bin/envsubst; \
    mv $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini \
    ; sed -i "s|^expose_php\s*=\s*\(.*\)|expose_php=Off|g" $PHP_INI_DIR/php.ini \
    ; sed -i "s|^\(;\)*realpath_cache_size\s*=\s*\(.*\)|realpath_cache_size=\2|g" $PHP_INI_DIR/php.ini \
    ; sed -i "s|^\(;\)*realpath_cache_ttl\s*=\s*\(.*\)|realpath_cache_ttl=\2|g" $PHP_INI_DIR/php.ini \
    ;

WORKDIR /var/www/html
CMD ["php", "-a"]
